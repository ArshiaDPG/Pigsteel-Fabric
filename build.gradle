plugins {
	id 'fabric-loom' version '1.2-SNAPSHOT'
	id 'maven-publish'
	id "me.shedaniel.unified-publishing" version "0.1.+"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.modid + "-fabric-" + project.minecraft_version
version = project.mod_version
group = project.maven_group

repositories {
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
	maven { url = "https://jitpack.io/" }
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	runtimeOnly("com.github.llamalad7.mixinextras:mixinextras-fabric:0.2.0-beta.9")
	modRuntimeOnly("maven.modrinth:HIuqnQpi:AlRsvRjn")
	modImplementation ("maven.modrinth:trimmed:${project.trimmed}")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
loom {
	runs {
		// This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
		datagenClient {
			inherit client
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=${project.modid}"

			runDir "build/datagen"
		}
	}
}

// Add the datagenned files into the jar.
sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}
unifiedPublishing {
	project {
		displayName = "${project.minecraft_version}-${project.mod_version}" // Optional, name of the file
		version = "${project.mod_version}" // Optional, Inferred from project by default
		changelog = '''<ul>
  <li>Added a built-in resourcepack that reverts Porkslag to Pigsteel Ore (only visually).</li>
</ul> '''
		releaseType = "release" // Optional, use "release", "beta" or "alpha"
		gameVersions = ["${project.minecraft_version}", "1.20"]
		gameLoaders = ["fabric"]

		mainPublication tasks.remapJar

		relations {
			depends { // Mark as a required dependency
				curseforge = "fabric-api" // Optional, project slug
				modrinth = "fabric-api" // Optional, project slug or id
			}
			includes {} // Mark as an included dependency
			optional {} // Mark as an optional dependency
			conflicts {} // Mark as a conflicted dependency
		}

		curseforge {
			token = System.getenv("CF_TOKEN")
			id = "448941" // Required, must be a string, ID of CurseForge project
		}

		modrinth {
			token = System.getenv("MODRINTH_TOKEN")
			id = "TON5iMzn" // Required, must be a string, ID of Modrinth project
		}
	}
}